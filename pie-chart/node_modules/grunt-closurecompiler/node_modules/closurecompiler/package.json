{
  "name": "closurecompiler",
  "version": "1.5.2",
  "description": "ClosureCompiler.js: Closure Compiler for node.js. The all-round carefree package.",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "contributors": [
    {
      "name": "Feross Aboukhadijeh",
      "email": "feross@feross.org"
    }
  ],
  "main": "ClosureCompiler.js",
  "bin": {
    "ccjs": "./bin/ccjs"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dcodeIO/ClosureCompiler.js.git"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/ClosureCompiler.js/issues"
  },
  "keywords": [
    "closure compiler",
    "closure",
    "compiler",
    "util",
    "utility"
  ],
  "dependencies": {
    "tar": "0.1.20",
    "closurecompiler-externs": "*",
    "bl": "~0.9.3",
    "jsdoc": "~3.3.0-alpha10"
  },
  "license": "Apache License, Version 2.0",
  "engines": {
    "node": ">=0.8"
  },
  "scripts": {
    "install": "npm run-script configure",
    "update": "npm run-script configure",
    "test": "node tests/test.js",
    "configure": "node scripts/configure.js",
    "make": "npm run-script compile && npm test && npm run-script jsdoc",
    "compile": "node bin/ccjs ClosureCompiler.js --externs=node --compilation_level=ADVANCED_OPTIMIZATIONS > ClosureCompiler.min.js",
    "jsdoc": "node node_modules/jsdoc/jsdoc.js -c jsdoc.json"
  },
  "preferGlobal": true,
  "readme": "![ClosureCompiler.js - Closure Compiler for node.js](https://raw.github.com/dcodeIO/ClosureCompiler.js/master/ClosureCompiler.png)\r\n=================================================\r\n\r\nThe all-round carefree package. Automatically downloads and sets up [Closure Compiler](https://developers.google.com/closure/compiler/)\r\nand a JRE built from [OpenJDK](http://openjdk.java.net) if required. No environment variables to set, works out of\r\nthe box.\r\n\r\nInstallation\r\n------------\r\n\r\nInstall: `npm -g install closurecompiler`\r\n\r\nInstalling globally is recommended if no global JRE is available and the bundled JRE needs to be downloaded, which is\r\nabout 45mb large.\r\n\r\nClosureCompiler API\r\n-------------------\r\nThe API is quite simple and fully explained in a few lines of code:\r\n\r\n```javascript\r\nvar ClosureCompiler = require(\"closurecompiler\");\r\n\r\nClosureCompiler.compile(\r\n    ['file1.js', 'file2.js'],\r\n    {\r\n        // Options in the API exclude the \"--\" prefix\r\n        compilation_level: \"ADVANCED_OPTIMIZATIONS\",\r\n        \r\n        // Capitalization does not matter \r\n        Formatting: \"PRETTY_PRINT\",\r\n        \r\n        // If you specify a directory here, all files inside are used\r\n        externs: [\"externs/file3.js\", \"externs/contrib/\"],\r\n        \r\n        // ^ As you've seen, multiple options with the same name are\r\n        //   specified using an array.\r\n        ...\r\n    },\r\n    function(error, result) {\r\n        if (result) {\r\n            // Write result to file\r\n            // Display error (warnings from stderr)\r\n        } else {\r\n            // Display error...\r\n         }\r\n    }\r\n);\r\n```\r\n\r\nCommand line utility\r\n--------------------\r\n\r\n```bash\r\nUsage:   ccjs sourceFiles...|- [--option=value --flagOption ...] [> outFile]\r\n```\r\n\r\n#### Available options ####\r\n\r\nThe API and `ccjs` support all the command line options of Closure Compiler except `--js` and `--js_output_file`.\r\n\r\n* [See the output of ccjs --help](https://github.com/dcodeIO/ClosureCompiler.js/blob/master/OPTIONS.md).\r\n\r\nAdditionally, the JVM parameters `-Xms` and `-Xmx` are supported just in case that you run out of heap space compiling a\r\nrather large code base. When omitted, `-Xmx` defaults to `1024m`.\r\n\r\nUsage with Grunt and Gulp\r\n----------------\r\n- [grunt-closurecompiler](https://github.com/dcodeIO/grunt-closurecompiler)\r\n- [gulp-closure-compiler](https://github.com/sindresorhus/gulp-closure-compiler)\r\n\r\nExterns for `ADVANCED_OPTIMIZATIONS`\r\n------------------------------------\r\n* [Closure Compiler official](http://code.google.com/p/closure-compiler/source/browse/externs)\r\n* [Closure Compiler contrib](http://code.google.com/p/closure-compiler/source/browse/contrib/externs)\r\n* [Closure Compiler common libraries](https://code.google.com/p/closure-compiler/wiki/ExternsForCommonLibraries)\r\n\r\n#### Externs for node.js ####\r\nClosureCompiler.js depends on the [closurecompiler-externs](https://npmjs.org/package/closurecompiler-externs) package,\r\nan npm distribution of [node.js Closure Compiler Externs](https://github.com/dcodeIO/node.js-closure-compiler-externs),\r\nwhich includes externs for all of node's core modules. As a result, specifiying `--externs=node` automatically includes\r\nall node.js specific externs in your compile step. If you are using non-core modules, you may still need\r\n[additional externs](https://github.com/dcodeIO/node.js-closure-compiler-externs/tree/master/contrib) for these. \r\n\r\nUpdating\r\n--------\r\nTo update ClosureCompiler.js and/or the underlying Closure Compiler package, just run `npm update`. This will\r\nautomatically download and set up the latest version of Closure Compiler to be used by ClosureCompiler.js.\r\n\r\n#### Using custom Closure Compiler builds ####\r\nIf you want to use a custom Closure Compiler build for whatever reason, just replace the files in the `compiler/`\r\ndirectory.\r\n\r\nDocumentation\r\n-------------\r\n* [View documentation](http://htmlpreview.github.com/?http://github.com/dcodeIO/ClosureCompiler.js/master/docs/ClosureCompiler.html)\r\n\r\nTests [![Build Status](https://travis-ci.org/dcodeIO/ClosureCompiler.js.png?branch=master)](https://travis-ci.org/dcodeIO/ClosureCompiler.js)\r\n-----\r\n* [View source](https://github.com/dcodeIO/ClosureCompiler.js/blob/master/tests/test.js)\r\n* [View report](https://travis-ci.org/dcodeIO/ClosureCompiler.js)\r\n\r\nContributors\r\n------------\r\nFeross Aboukhadijeh\r\n\r\nLicense\r\n-------\r\n\r\n#### ClosureCompiler.js and Closure Compiler itself ####\r\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\r\n\r\n#### Rhino ####\r\nMPL 2.0 License - https://developer.mozilla.org/en-US/docs/Rhino/License\r\n\r\n#### Bundled JRE ####\r\nBinary License for OpenJDK - http://openjdk.java.net/legal/binary-license-2007-05-08.html\r\n\r\nThis package is not officially supported by Google, Mozilla or Oracle. All rights belong to their respective owners.\r\n",
  "readmeFilename": "README.md",
  "_id": "closurecompiler@1.5.2",
  "_from": "closurecompiler@>=1.2"
}
